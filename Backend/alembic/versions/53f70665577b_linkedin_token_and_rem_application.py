"""linkedin token and rem application

Revision ID: 53f70665577b
Revises: 6069f05c0e5c
Create Date: 2025-09-26 18:15:19.056156

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '53f70665577b'
down_revision: Union[str, Sequence[str], None] = '6069f05c0e5c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_application_application_id'), table_name='application')
    op.drop_table('application')
    op.drop_constraint(op.f('feedback_application_id_fkey'), 'feedback', type_='foreignkey')
    op.drop_column('feedback', 'application_id')
    op.drop_constraint(op.f('interview_application_id_fkey'), 'interview', type_='foreignkey')
    op.drop_column('interview', 'application_id')
    op.drop_constraint(op.f('offer_letter_application_id_fkey'), 'offer_letter', type_='foreignkey')
    op.drop_column('offer_letter', 'application_id')
    op.drop_constraint(op.f('resume_parsing_application_id_fkey'), 'resume_parsing', type_='foreignkey')
    op.drop_column('resume_parsing', 'application_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('resume_parsing', sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('resume_parsing_application_id_fkey'), 'resume_parsing', 'application', ['application_id'], ['application_id'])
    op.add_column('offer_letter', sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('offer_letter_application_id_fkey'), 'offer_letter', 'application', ['application_id'], ['application_id'])
    op.add_column('interview', sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('interview_application_id_fkey'), 'interview', 'application', ['application_id'], ['application_id'])
    op.add_column('feedback', sa.Column('application_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('feedback_application_id_fkey'), 'feedback', 'application', ['application_id'], ['application_id'])
    op.create_table('application',
    sa.Column('application_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('candidate_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resume_file', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('submission_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('fee_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidate.candidate_id'], name=op.f('application_candidate_id_fkey')),
    sa.ForeignKeyConstraint(['job_id'], ['job.job_id'], name=op.f('application_job_id_fkey')),
    sa.PrimaryKeyConstraint('application_id', name=op.f('application_pkey'))
    )
    op.create_index(op.f('ix_application_application_id'), 'application', ['application_id'], unique=False)
    # ### end Alembic commands ###
